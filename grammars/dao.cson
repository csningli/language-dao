# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.dao'
'name': 'Dao'
'fileTypes': [
  'dao'
]
'firstLineMatch': '^#![ \\t]*/.*\\bdao[\\d\\.]*\\b'
'injections':
  'L:source.dao meta.embedded.sql':
    'patterns': [
      {
        'include': '#string_formatting'
      }
      {
        'include': '#escaped_char'
      }
    ]
'patterns': [
  {
    'include': '#line_comments'
  }
  {
    'include': '#language_variables'
  }
  {
    'match': '^\\s*#.*$'
    'name': 'comment'
  }
  {
    'match': '\\b(public|protect|private|self)'
    'name': 'variable.language.dao'
  }
  {
    'match': '\\b(?i:(0x\\h*)L)'
    'name': 'constant.numeric.integer.long.hexadecimal.dao'
  }
  {
    'match': '\\b(?i:(0x\\h*))'
    'name': 'constant.numeric.integer.hexadecimal.dao'
  }
  {
    'match': '\\b(?i:(0o?[0-7]+)L)'
    'name': 'constant.numeric.integer.long.octal.dao'
  }
  {
    'match': '\\b(?i:(0o?[0-7]+))'
    'name': 'constant.numeric.integer.octal.dao'
  }
  {
    'match': '\\b(?i:(0b[01]+)L)',
    'name': 'constant.numeric.integer.long.binary.dao'
  }
  {
    'match': '\\b(?i:(0b[01]+))',
    'name': 'constant.numeric.integer.binary.dao'
  }
  {
    'match': '\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])'
    'name': 'constant.numeric.float.dao'
  }
  {
    'match': '(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))'
    'name': 'constant.numeric.float.dao'
  }
  {
    'match': '\\b(?i:(\\d+e[\\-\\+]?\\d+))'
    'name': 'constant.numeric.float.dao'
  }
  {
    'match': '\\b(?i:([1-9]+[0-9]*|0)L)'
    'name': 'constant.numeric.integer.long.decimal.dao'
  }
  {
    'match': '\\b([1-9]+[0-9]*|0)'
    'name': 'constant.numeric.integer.decimal.dao'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.load.dao'
      '2':
        'name': 'keyword.control.load.from.dao'
    'match': '\\b(?:(load)|(from))\\b'
  }
  {
    'comment': 'keywords that delimit flow conditionals'
    'name': 'keyword.control.conditional.dao'
    'match': '\\b(if|else|swich|case|default)\\b'
  }
  {
    'comment': 'keywords that delimit loops'
    'name': 'keyword.control.repeat.dao'
    'match': '\\b(for|while|iterate)\\b'
  }
  {
    'comment': 'keywords that alter flow from within a block'
    'name': 'keyword.control.statement.dao'
    'match': '\\b(break|skip|return)\\b'
  }
  {
    'comment': 'keyword operators that evaluate to True or False'
    'match': '\\b(and|in|not|or)\\b'
    'name' : 'support.function.logic.dao'
  }
  {
    'captures':
      '1':
        'name': 'keyword.other.dao'
    'comment': 'keywords that haven\'t fit into other groups (yet).'
    'match': '\\b(write|writeln)\\b'
  }
  {
    'match': '<\\=|>\\=|\\=\\=|<|>|\\!\\='
    'name' : 'support.function.comparison.dao'
  }
  {
    'match': '\\=|\\+\\=|-\\=|\\*\\=|/\\=|//\\=|%\\=|&\\=|\\|\\=|\\^\\=|>>\\=|<<\\=|\\*\\*\\='
    'name' : 'support.function.assignment.dao'
  }
  {
    'match': '\\+|\\-|\\*|\\*\\*|/|//|%'
    'name' : 'support.function.arithmetic.dao'
  }
  {
    'match': '\\s+(?<=\\\()([A-Za-z_][A-Za-z0-9_]*)(?=\\\))'
    'name' : 'entity.name.type.class.dao'
  }
  {
    'begin': '^\\s+(?=\\\()'
    'end': '\\s*(?=\\\))'
    'patterns' : [
        'begin': '(?=[a-zA-Z_][a-zA-Z_0-9]*)'
        'contentName': 'entity.name.type.class.dao'
        'end': '\\s*(?=\\\))'
    ]
  }
  {
    'begin': '^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*)'
    'beginCaptures':
      '1':
        'name': 'storage.type.class.dao'
    'end': '\\s*(\\{)'
    'endCaptures':
      '1':
        'name': 'punctuation.section.class.begin.dao'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
        'contentName': 'entity.name.type.class.dao'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          {
            'include': '#entity_name_class'
          }
        ]
      }
      {
        'begin': '\\s+(\\:)'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.inheritance.begin.dao'
        'contentName': 'meta.class.inheritance.dao'
        'end': '\\s*(\\{|\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.class.begin.dao'
        'patterns': [
          {
            'begin': '\\s*(?<=\\:|,)\\s*'
            'contentName': 'entity.other.inherited-class.dao'
            'end': '\\s*(?=(,|\\s))'
            'endCaptures':
              '1':
                'name': 'punctuation.separator.inheritance.dao'
            'patterns': [
              {
                'include': '$self'
              }
            ]
          }
        ]
      }
    ]
  }
  {
    'begin': '^\\s*(interface)\\s+(?!(routine))\\s*(?=[a-zA-Z_][a-zA-Z_0-9]*)'
    'beginCaptures':
      '1':
        'name': 'storage.type.class.dao'
    'end': '\\s*(\\{)'
    'endCaptures':
      '1':
        'name': 'punctuation.section.class.begin.dao'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
        'contentName': 'entity.name.type.class.dao'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          {
            'include': '#entity_name_class'
          }
        ]
      }
      {
        'begin': '\\s+(\\:)'
        'beginCaptures':
          '1':
            'name': 'punctuation.separator.inheritance.dao'
        'end': '\\s*(\\{|\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.class.begin.dao'
        'patterns': [
          {
            'begin': '\\s*(?<=\\:|,)\\s*'
            'contentName': 'entity.other.inherited-class.dao'
            'end': '\\s*(?=(,|\\s))'
            'endCaptures':
              '1':
                'name': 'punctuation.separator.inheritance.dao'
            'patterns': [
              {
                'include': '$self'
              }
            ]
          }
        ]
      }
    ]
  }

  {
    'begin': '^\\s*(interface)*\\s*(routine)\\s+(?=[A-Za-z_][A-Za-z0-9_]*)'
    'beginCaptures':
        '1':
          'name': 'storage.type.class.dao'
        '2':
          'name': 'storage.type.function.dao'
    'end': '((\\s*(\\{|\\}))|(?=(\\s*routine)))'
    'name': 'meta.function.dao'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
        'contentName': 'entity.name.function.dao'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          {
            'include': '#entity_name_function'
          }
        ]
      }
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.parameters.begin.dao'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.parameters.end.dao'
        'contentName': 'meta.function.parameters.dao'
        'patterns': [
          {
            'include': '#line_comments'
          }
          {

            'begin': '\\b([a-zA-Z_][\\w_]*)\\s*(?:(:)\\s*([a-zA-Z_][\\w_]*))?\\s*(\\=)?\\s*'
            'beginCaptures':
              '1':
                'name': 'variable.parameter.function.dao'
              '2':
                'name': 'punctuation.separator.inheritance.dao'
              '3':
                'name' : 'entity.name.type.class.dao'
              '4':
                'name': 'keyword.operator.assignment.dao'
            'end': '\\s*(,)'
            'endCaptures':
              '1':
                'name' : 'entity.name.type.class.dao'
            'patterns': [
              {
                'include': '$self'
              }
            ]
          }
          {
            'match': '\\b([a-zA-Z_][\\w_]*)\\s*(?:(:)\\s*([a-zA-Z_][\\w_]*))?'
            'captures':
              '1':
                'name': 'variable.parameter.function.dao'
              '2':
                'name': 'punctuation.separator.dao'
              '3':
                'name': 'storage.type.dao'
          }
          {
            'match': ','
            'name': 'punctuation.separator.parameters.dao'
          }
        ]
      }
      {
        'match': '(=>)\\s*([A-Za-z_][\\w_]*)(?=\\s*:)'
        'captures':
          '1':
            'name': 'keyword.operator.function-annotation.dao'
          '2':
            'name': 'storage.type.dao'
      }
    ]
  }

  {
    'include': '#function_calls'
  }
  {
    'include': '#method_calls'
  }
  {
    'include': '#objects'
  }
  {
    'include': '#properties'
  }
  {
    'match': '\\b(none|true|false)\\b'
    'name': 'constant.language.dao'
  }
  {
    'include': '#string_quoted_single'
  }
  {
    'include': '#string_quoted_double'
  }
  {
    'begin' : '\\\(\\s*(?=var)'
    'contentName': 'storage.type.class.dao'
    'end' : '\\s+'
  }
  {
    'begin': '^\\s*(var)\\s*(?=[A-Za-z_][A-Za-z0-9_]*)'
    'beginCaptures':
        '1':
          'name': 'storage.type.class.dao'
    'end': '\\s*((\\=)|\\r|\\n)\\s*'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.function.begin.dao'
      '1':
        'name': 'support.function.assignment.dao'
    'patterns': [
      {
        'begin': '\\s*(?=[A-Za-z_][A-Za-z0-9_]*)'
        'end': '\\s*(?=(\\=))'
        'patterns': [
            {
              'match' : '(,)'
              'name' : 'entity.name.type.class.dao'
            }
            {
              'begin': '\\s*(?=(\\:))'
              'end': '\\s*(?=(\\=))'
              'patterns': [
                  {
                    'begin': '\\s*(?=[A-Za-z_][A-Za-z0-9_]*)'
                    'end' : '(\\s*(?=(\\=)))|(\\\|)'
                    'endCaptures':
                      '3':
                        'name' : 'entity.name.type.class.dao'
                    'patterns': [
                      {
                        'begin': '\\s*(?=[A-Za-z_][A-Za-z0-9_]*)'
                        'end' : '(\\s*(?=(\\=)))|(\\\|)'
                        'patterns': [
                          {
                            'match' : '\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*'
                            'name' : 'entity.name.type.class.dao'
                          }
                          {
                            'begin': '\\s*([A-Za-z_][A-Za-z0-9_]*)?\\\<'
                            'beginCaptures':
                              '1':
                                'name' : 'entity.name.type.class.dao'
                            'contentName' : 'entity.name.type.class.dao'
                            'end' : '\\\>'
                            'patterns': [
                              {
                                'begin': '\\s*(\\:)(\\s*(?=[A-Za-z_][A-Za-z0-9_]*))'
                                'contentName' : 'entity.name.type.class.dao'
                                'end': '\\s*(?=(,|\\s))'
                                'patterns': [
                                  {
                                    'include': '$base'
                                  }
                                ]
                              }
                              {
                                'include': '$self'
                              }                              
                            ]
                          }
                        ]
                      }
                    ]
                  }
              ]
           }
        ]
      }
    ]
  }
]

'repository':
  'builtin_functions':
    'match': '\\b(public|protect|private|bool|complex|string|float|list|open|writeln|write|tuple|type|var|reload)\\b'
    'name': 'support.function.builtin.dao'
'builtin_types':
    'match': '(?x)\\b(\n\t\t\t\tbool|complex|float|int|\n\t\t\t\tlist|map|string|long|dict|tuple\n\t\t\t)\\b'
    'name': 'support.type.dao'
