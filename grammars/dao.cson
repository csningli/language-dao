# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.dao'
'name': 'Dao'
'fileTypes': [
  'dao'
]
'firstLineMatch': '^#![ \\t]*/.*\\bdao[\\d\\.]*\\b'
'injections':
  'L:source.dao meta.embedded.sql':
    'patterns': [
      {
        'include': '#string_formatting'
      }
      {
        'include': '#escaped_char'
      }
    ]
'patterns': [
  {
    'include': '#line_comments'
  }
  {
    'include': '#language_variables'
  }
  {
    'match': '^\\s*#.*$'
    'name': 'comment'
  }
  {
    'match': '\\b(public|protect|private|static|self|io|fs|os|std)\\b'
    'name': 'variable.language.dao'
  }
  {
    'match': '\\b(?i:(0x\\h*)L)'
    'name': 'constant.numeric.integer.long.hexadecimal.dao'
  }
  {
    'match': '\\b(?i:(0x\\h*))'
    'name': 'constant.numeric.integer.hexadecimal.dao'
  }
  {
    'match': '\\b(?i:(0o?[0-7]+)L)'
    'name': 'constant.numeric.integer.long.octal.dao'
  }
  {
    'match': '\\b(?i:(0o?[0-7]+))'
    'name': 'constant.numeric.integer.octal.dao'
  }
  {
    'match': '\\b(?i:(0b[01]+)L)',
    'name': 'constant.numeric.integer.long.binary.dao'
  }
  {
    'match': '\\b(?i:(0b[01]+))',
    'name': 'constant.numeric.integer.binary.dao'
  }
  {
    'match': '\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])'
    'name': 'constant.numeric.float.dao'
  }
  {
    'match': '(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))'
    'name': 'constant.numeric.float.dao'
  }
  {
    'match': '\\b(?i:(\\d+e[\\-\\+]?\\d+))'
    'name': 'constant.numeric.float.dao'
  }
  {
    'match': '\\b(?i:([1-9]+[0-9]*|0)L)'
    'name': 'constant.numeric.integer.long.decimal.dao'
  }
  {
    'match': '\\b([1-9]+[0-9]*|0)'
    'name': 'constant.numeric.integer.decimal.dao'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.load.dao'
      '2':
        'name': 'keyword.control.load.from.dao'
    'match': '\\b(?:(load)|(reload)|(from))\\b'
  }
  {
    'comment': 'keywords that delimit flow conditionals'
    'name': 'keyword.control.conditional.dao'
    'match': '\\b(if|else|switch|case|default)\\b'
  }
  {
    'comment': 'keywords that delimit loops'
    'name': 'keyword.control.repeat.dao'
    'match': '\\b(for|while|do|in)\\b'
  }
  {
    'comment': 'keywords that alter flow from within a block'
    'name': 'keyword.control.statement.dao'
    'match': '\\b(break|skip|return)\\b'
  }
  {
    'comment': 'keyword operators that evaluate to True or False'
    'match': '\\b(and|not|or)\\b'
    'name': 'constant.language.dao'
  }
  {
    'captures':
      '1':
        # 'name': 'meta.class.inheritance.dao'
        'name': 'entity.other.inherited-class.python'
    'comment': 'keywords that haven\'t fit into other groups (yet).'
    'match': '\\b(write|writeln|iterate|size|append|erase|insert|clear|push|pop|keys|values)\\b'
  }
  {
    'match': '\\b([A-Za-z_]+\\:\\:[A-Za-z0-9_]+)\\b'
    'name': 'entity.other.inherited-class.python'
  }
  {
    'match': '<\\=|>\\=|\\=\\=|<|>|\\[|\\]|{|}|\\(|\\)|\\!\\='
    'name' : 'support.function.comparison.dao'
  }
  {
    'match': '\\=|\\+\\=|-\\=|\\*\\=|/\\=|//\\=|%\\=|>>\\=|<<\\=|\\*\\*\\='
    'name' : 'support.function.assignment.dao'
  }
  {
    'match': '\\+|\\-|\\*|\\*\\*|/|//|%'
    'name' : 'support.function.arithmetic.dao'
  }
  {
    'match': '\\s+(?<=\\()([A-Za-z_][A-Za-z0-9_]*)(?=\\\))'
    'name' : 'entity.name.type.class.dao'
  }
  {
    'match': ',|\\:|\\||\\.'
    'name': 'entity.name.type.class.dao'
  }
  {
    'begin': '^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*)'
    'beginCaptures':
      '1':
        'name': 'storage.type.class.dao'
    'end': '\\s*((?=\\{)|(?=\\:))'
    'endCaptures':
      '1':
        'name': 'punctuation.section.class.begin.dao'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
        'contentName': 'entity.name.type.class.dao'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          {
            'include': '#entity_name_class'
          }
        ]
      }
    ]
  }
  {
    'begin': '^\\s*(interface)\\s+(?!(routine))\\s*(?=[a-zA-Z_][a-zA-Z_0-9]*)'
    'beginCaptures':
      '1':
        'name': 'storage.type.class.dao'
    'end': '\\s*(?=(\\:|\\{))'
    'endCaptures':
      '1':
        'name': 'punctuation.section.class.begin.dao'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
        'contentName': 'entity.name.type.class.dao'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          {
            'include': '#entity_name_class'
          }
        ]
      }
    ]
  }
  {
    'begin': '^\\s*(interface)*\\s*(routine)\\s+(?=[A-Za-z_][A-Za-z0-9_]*)'
    'beginCaptures':
        '1':
          'name': 'storage.type.class.dao'
        '2':
          'name': 'storage.type.function.dao'
    # 'end': '(?=(\\s*(\\(|\\{|\\}|(*routine))))'
    'end' : '(?=(\\s*\\())'
    'name': 'meta.function.dao'
    'patterns': [
      {
        'begin': '(?=[A-Za-z_][A-Za-z0-9_]*)'
        'contentName': 'entity.name.function.dao'
        'end': '(?![A-Za-z0-9_])'
        'patterns': [
          {
            'include': '#entity_name_function'
          }
        ]
      }
    ]
  }

  {
    'include': '#function_calls'
  }
  {
    'include': '#method_calls'
  }
  {
    'include': '#objects'
  }
  {
    'include': '#properties'
  }
  {
    'match': '\\b(none|true|false)\\b'
    'name': 'constant.language.dao'
  }
  {
    'include': '#string_quoted_single'
  }
  {
    'include': '#string_quoted_double'
  }
  {
    'begin' : '^\\s*(?=var)'
    'contentName': 'storage.type.class.dao'
    'end' : '\\s+'
  }
  {
    'begin' : '\\\(\\s*(?=var)'
    'contentName': 'storage.type.class.dao'
    'end' : '\\s+'
  }
]
